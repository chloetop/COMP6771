template <typename T>
typename btree_iterator<T>::btree_iterator& btree_iterator<T>::operator++() {
    // If the right child exists, follow it and go down as deep
    // as possible, only ever taking the first child
    if (pointee_->numVals_ == pointee_->nodeSize_ && pointee_->children_[index_ + 1] != nullptr) {
        pointee_ = pointee_->children_[index_ + 1];
        index_ = 0;
        while (pointee_->numVals_ == pointee_->nodeSize_ && pointee_->children_[0] != nullptr) {
            pointee_ = pointee_->children_[0];
        }
    } else if (index_ < pointee_->numVals_ - 1) {
        // Move horizontally across
        ++index_;
    } else if (pointee_->parent_ != nullptr && pointee_->parentIndex_ < pointee_->parent_->numVals_) {
        // Go back up to the parent
        index_ = pointee_->parentIndex_;
        pointee_ = pointee_->parent_;
    } else {
        // This is the end
        pointee_ = nullptr;
        index_ = 0;
    }

    return *this;
}

template <typename T>
typename btree_iterator<T>::btree_iterator& btree_iterator<T>::operator--() {
    bool moved = false;

    // If this is current pointing at 'end()' then we go to last
    if (pointee_ == nullptr) {
        pointee_ = tree_->last_;
        index_ = pointee_->numVals_ - 1;
        moved = true;
    }

    // If the left child exists, follow it and go down as deep
    // as possible, only ever taking the last child
    while (!moved && pointee_->numVals_ == pointee_->nodeSize_ && pointee_->children_[index_] != nullptr) {
        pointee_ = pointee_->children_[index_];
        index_ = pointee_->numVals_ - 1;
        moved = true;
    }
    if (!moved && index_ > 0) {
        // Move horizontally across
        --index_;
    } else if (!moved && pointee_->parent_ != nullptr) {
        // Go back up to the parent
        index_ = pointee_->parentIndex_ - 1;
        pointee_ = pointee_->parent_;

        // Keep going up while we can, if our index is screwed up
        while (pointee_->parent_ != nullptr && index_ < 0) {
            index_ = pointee_->parentIndex_ - 1;
            pointee_ = pointee_->parent_;
        }

        // If our index is still screwed up at the end, this is the beginning
        // TODO we don't actually need this
        if (index_ < 0) {
            pointee_ = nullptr;
            index_ = 0;
        }
    }

    return *this;
}

template <typename T>
typename btree_iterator<T>::reference btree_iterator<T>::operator*() const {
    return pointee_->vals_[index_];
}

template <typename T>
typename const_btree_iterator<T>::const_btree_iterator& const_btree_iterator<T>::operator++() {
    // If the right child exists, follow it and go down as deep
    // as possible, only ever taking the first child
    if (pointee_->numVals_ == pointee_->nodeSize_ && pointee_->children_[index_ + 1] != nullptr) {
        pointee_ = pointee_->children_[index_ + 1];
        index_ = 0;
        while (pointee_->numVals_ == pointee_->nodeSize_ && pointee_->children_[0] != nullptr) {
            pointee_ = pointee_->children_[0];
        }
    } else if (index_ < pointee_->numVals_ - 1) {
        // Move horizontally across
        ++index_;
    } else if (pointee_->parent_ != nullptr && pointee_->parentIndex_ < pointee_->parent_->numVals_) {
        // Go back up to the parent
        index_ = pointee_->parentIndex_;
        pointee_ = pointee_->parent_;
    } else {
        // This is the end
        pointee_ = nullptr;
        index_ = 0;
    }

    return *this;
}

template <typename T>
typename const_btree_iterator<T>::const_btree_iterator& const_btree_iterator<T>::operator--() {
    bool moved = false;

    // If this is current pointing at 'end()' then we go to last
    if (pointee_ == nullptr) {
        pointee_ = tree_->last_;
        index_ = pointee_->numVals_ - 1;
        moved = true;
    }

    // If the left child exists, follow it and go down as deep
    // as possible, only ever taking the last child
    while (!moved && pointee_->numVals_ == pointee_->nodeSize_ && pointee_->children_[index_] != nullptr) {
        pointee_ = pointee_->children_[index_];
        index_ = pointee_->numVals_ - 1;
        moved = true;
    }
    if (!moved && index_ > 0) {
        // Move horizontally across
        --index_;
    } else if (!moved && pointee_->parent_ != nullptr) {
        // Go back up to the parent
        index_ = pointee_->parentIndex_ - 1;
        pointee_ = pointee_->parent_;

        // Keep going up while we can, if our index is screwed up
        while (pointee_->parent_ != nullptr && index_ < 0) {
            index_ = pointee_->parentIndex_ - 1;
            pointee_ = pointee_->parent_;
        }

        // If our index is still screwed up at the end, this is the beginning
        // TODO we don't actually need this
        if (index_ < 0) {
            pointee_ = nullptr;
            index_ = 0;
        }
    }

    return *this;
}

template <typename T>
typename const_btree_iterator<T>::reference const_btree_iterator<T>::operator*() const {
    return pointee_->vals_[index_];
}