#include <queue>

template <typename T>
btree<T>::btree(size_t maxNodeElems) : nodeSize_(maxNodeElems),
                                       root_(nullptr),
                                       first_(nullptr),
                                       last_(nullptr) {
}

template <typename T>
btree<T>::btree(const btree<T>& original) : nodeSize_(original.nodeSize_),
                                            root_(nullptr),
                                            first_(nullptr),
                                            last_(nullptr) {
    // Copy the tree
    if (original.root_ != nullptr) {
        root_ = new node(original.root_, nullptr, 0);
    }

    // Update first_ and last_
    first_ = root_;
    while (first_->numVals_ == first_->nodeSize_ && first_->children_[0] != nullptr) {
        first_ = first_->children_[0];
    }
    last_ = root_;
    while (last_->numVals_ == last_->nodeSize_ && last_->children_[last_->numVals_] != nullptr) {
        last_ = last_->children_[last_->numVals_];
    }
}

template <typename T>
btree<T>::btree(btree<T>&& original) : nodeSize_(original.nodeSize_),
                                       root_(original.root_),
                                       first_(original.first_),
                                       last_(original.last_) {
    original.nodeSize_ = 0;
    original.root_ = nullptr;
    original.first_ = nullptr;
    original.last_ = nullptr;
}

template <typename T>
btree<T>& btree<T>::operator=(const btree<T>& rhs) {
    // Check for self assignment
    if (this == &rhs) {
        return *this;
    }

    // Free whatever memory we had
    if (root_ != nullptr) {
        delete root_;
    }

    // Copy variables
    nodeSize_ = rhs.nodeSize_;

    // Copy the tree
    if (rhs.root_ != nullptr) {
        root_ = new node(rhs.root_, nullptr, 0);
        fflush(stdout);

        // Update first_ and last_
        first_ = root_;
        while (first_->numVals_ == first_->nodeSize_ && first_->children_[0] != nullptr) {
            first_ = first_->children_[0];
        }
        last_ = root_;
        while (last_->numVals_ == last_->nodeSize_ && last_->children_[last_->numVals_] != nullptr) {
            last_ = last_->children_[last_->numVals_];
        }
    } else {
        root_ = nullptr;
        first_ = nullptr;
        last_ = nullptr;
    }

    return *this;
}

template <typename T>
btree<T>& btree<T>::operator=(btree<T>&& rhs) {
    // Check for self assignment
    if (this == &rhs) {
        return *this;
    }

    // Free whatever memory we had
    if (root_ != nullptr) {
        delete root_;
    }

    // Move over stuff
    nodeSize_ = rhs.nodeSize_;
    root_ = rhs.root_;
    first_ = rhs.first_;
    last_ = rhs.last_;

    rhs.nodeSize_ = 0;
    rhs.root_ = nullptr;
    rhs.first_ = nullptr;
    rhs.last_ = nullptr;

    return *this;
}

template <typename T>
ostream& operator<<(ostream& out, const btree<T>& tree) {
    queue<typename btree<T>::node*> q;
    if (tree.root_ != nullptr) {
        q.push(tree.root_);
    }

    while (!q.empty()) {
        auto cur = q.front();
        q.pop();
        cout << *cur;

        // If it has children
        if (cur->numVals_ == cur->nodeSize_) {
            // Add all the non nullptr children onto queue
            for (size_t i = 0; i <= cur->numVals_; ++i) {
                if (cur->children_[i] != nullptr) {
                    q.push(cur->children_[i]);
                }
            }
        }
    }

    return out;
}

template <typename T>
typename btree<T>::iterator btree<T>::find(const T& elem) {
    node *cur = root_;
    size_t i;

    if (root_ != nullptr) {
        while (true) {
            // Scan horizontally until we overshoot
            for (i = 0; i < cur->numVals_ && cur->vals_[i] <= elem; ++i) {
                if (cur->vals_[i] == elem) {
                    return const_iterator(cur, i, this);
                }
            }

            // Descend into left child and repeat
            if (cur->numVals_ == cur->nodeSize_&& cur->children_[i] != nullptr) {
                cur = cur->children_[i];
            } else {
                break;
            }
        }
    }

    return const_iterator(nullptr, 0, this);
}

template <typename T>
typename btree<T>::const_iterator btree<T>::find(const T& elem) const {
    node *cur = root_;
    size_t i;

    if (root_ != nullptr) {
        while (true) {
            // Scan horizontally until we overshoot
            for (i = 0; i < cur->numVals_ && cur->vals_[i] <= elem; ++i) {
                if (cur->vals_[i] == elem) {
                    return const_iterator(cur, i, this);
                }
            }

            // Descend into left child and repeat
            if (cur->numVals_ == cur->nodeSize_&& cur->children_[i] != nullptr) {
                cur = cur->children_[i];
            } else {
                break;
            }
        }
    }

    return const_iterator(nullptr, 0, this);
}

template <typename T>
pair<typename btree<T>::iterator, bool> btree<T>::insert(const T& elem) {
    node *cur = root_;
    size_t i;

    if (root_ != nullptr) {
        while (true) {
            // Scan horizontally until we overshoot
            for (i = 0; i < cur->numVals_ && cur->vals_[i] <= elem; ++i) {
                if (cur->vals_[i] == elem) {
                    return make_pair(iterator(cur, i, this), false);
                }
            }

            // Descend into left child and repeat
            if (cur->numVals_ == cur->nodeSize_) {
                if (cur->children_[i] == nullptr) {
                    cur->children_[i] = new node(nodeSize_, cur, i);
                    cur = cur->children_[i];
                    i = 0;
                    break;
                } else {
                    cur = cur->children_[i];
                }
            } else {
                break;
            }
        }
    } else {
        root_ = new node(nodeSize_, nullptr, 0);
        cur = root_;
        i = 0;
    }

    ++cur->numVals_;

    // Insert at i, shuffle the rest backwards first
    copy_backward(cur->vals_ + i, cur->vals_ + cur->numVals_ - 1, cur->vals_ + cur->numVals_);
    cur->vals_[i] = elem;

    if (cur->numVals_ == nodeSize_) {
        // Create the children
        cur->children_ = new node*[nodeSize_ + 1];
        for (size_t n = 0; n < nodeSize_ + 1; ++n) {
            cur->children_[n] = nullptr;
        }
    }

    // Update first_ and last_
    if (first_ == nullptr || elem < first_->vals_[0]) {
        first_ = cur;
    }
    if (last_ == nullptr || elem > last_->vals_[last_->numVals_ - 1]) {
        last_ = cur;
    }

    return make_pair(iterator(cur, i, this), true);
}

template <typename T>
btree<T>::~btree() {
    if (root_ != nullptr) {
        delete root_;
    }
    first_ = nullptr;
    last_ = nullptr;
}